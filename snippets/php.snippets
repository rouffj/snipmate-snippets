snippet php
	<?php

	${1}
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 */
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @subpackage ${3:default}
	 * @author ${4:`g:snips_author`}
	 */${5}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 */${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 */
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${1:undocumented class}
	 *
	 * @author ${2:`g:snips_author`}
	 */
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 */${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 */
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 */${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 */
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 */
	${1}function ${2}(${3})
	{${7}
	}
# class ...
snippet class
	/**
	 * ${1}
	 *
	 * @author `g:snips_author`
	 */
	class ${2:ClassName}
	{
		${3}
		public function ${4:__construct}(${5:argument})
		{
			${6:// code...}
		}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:value}) {
		${3:// code...}
	}
snippet foreachk
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${4:// code...}
	}
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
snippet try
	try {
		${2}
	} catch (${1:Exception} $e) {
	}
# lambda with closure
snippet lambda
	${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {
		${4}
	};
# pre_dump();
snippet pd
	echo '<pre>'; var_dump(${1}); echo '</pre>';
# pre_dump(); die();
snippet pdd
	echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${2:});
snippet vd
	var_dump(${1});
snippet vdd
	var_dump(${1}); die(${2:});
snippet http_redirect
	header ("HTTP/1.1 301 Moved Permanently"); 
	header ("Location: ".URL); 
	exit();



## Perso

# Getters & Setters
snippet get
	/**
	 * Gets the value of ${1:}
	 *
	 * @return ${2}
	 */
	public function get$1()
	{
		return $this->$1;
	}
snippet set
	/**
	 * Sets the value of ${1:}
	 *
	 * @param mixed $$1 ${3}
	 */
	public function set$1($$1)
	{
		$this->$1 = $$1;
	}
# Symfony2
snippet ns
	namespace ${2}${1:`substitute(substitute(expand("%:h"), 'v^w+/(u)', '1', ''), '/', '\', 'g')`};

snippet form_sub
	use Symfony\Component\Form\FormEvent;
	use Symfony\Component\Form\FormEvents;
	use Symfony\Component\EventDispatcher\EventSubscriberInterface;
	
	class ${1}Subscriber implements EventSubscriberInterface
	{
	    public static function getSubscribedEvents()
	    {
	        return array(FormEvents::${2:PRE_SET_DATA} => '${3:preSetData}');
	    }
	
	    public function preSetData(FormEvent $event)
	    {
		${4}
	    }
	}

snippet use
	use ${1:Symfony}\${2:Component}\${3:ComponentName};

snippet form_type
	use Symfony\Component\Form\AbstractType;
	use Symfony\Component\Form\FormBuilderInterface;
	use Symfony\Component\OptionsResolver\OptionsResolverInterface;

	class ${1:Article}Type extends AbstractType
	{
	    public function buildForm(FormBuilderInterface $builder, array $options)
	    {
	        $builder
	            ->add('${2:name}', 'text')
	        ;
	    }

	    public function setDefaultOptions(OptionsResolverInterface $resolver) {
	        $resolver->setDefaults(array(
	            'data_class' => '${3:FQNToDomainClass}'
	        ));
	    }

	    public function getName()
	    {
	        return 'app_$1';
	    }
	}

snippet cmd
	use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
	use Symfony\Component\Console\Input\InputOption;
	use Symfony\Component\Console\Input\InputInterface;
	use Symfony\Component\Console\Output\OutputInterface;
	use Symfony\Component\Console\Output\Output;
	
	class ${1:Name}Command extends ContainerAwareCommand
	{
	    protected function configure()
	    {
	        $this
	            ->setName('${2:namespace:cmd}')
	            ->setDescription('${3:Full description}')
	        ;
	    }
	
	    protected function execute(InputInterface $input, OutputInterface $output)
	    {
	        ${4:}
	    }
	}
snippet cmd_addOpt
	->addOption('${1:opt-name}', ${2:'shortcut'}, InputOption::VALUE_${3:REQUIRED|OPTIONAL}, '${4:option description}')
snippet cmd_addArg
	->addArgument('${1:arg-name}', InputArgument::${2:REQUIRED|OPTIONAL}, '${3:argument description}')

# Doctrine
snippet repo
	use Doctrine\ORM\EntityRepository;
	
	class ${1:RepoName}Repository extends EntityRepository
	{
	    public function find${2:methodName}()
	    {
	        //return $this->getEntityManager()->createQuery('SELECT p FROM AppBundle:Product p ORDER BY p.name ASC')->getResult();
	    }
	}

snippet echo_response
	print_r($this->client->getResponse()->getContent());die;

# Doctrine
snippet dumper
	\Symfony\Component\VarDumper\VarDumper::dump(${1:myVar});

snippet dump
	\Doctrine\Common\Util\Debug::dump(${1:entityToDump});

# Tests
snippet test_f
	use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
	
	class ${5:ClassName}Test extends \PHPUnit_Framework_TestCase
	{
	    public function setUp()
	    {
	    }
	
	    public function tearDown()
	    {
	    }
	}

snippet test_m
	public function test${1:MethodName}()
	{
	    ${2:}
	}

snippet test_a
	$this->assert${1:AssertType}(${2:$expectedValue}, ${3:$realValue});

snippet test_a2
	$this->assert${1:AssertType}(${2:$realValue});

snippet inspect
	$class = new \ReflectionClass(${1:$this});
	echo sprintf("%s:\n", $class->name);
	foreach ($class->getMethods() as $method) {
	    $params = [];
	    foreach ($method->getParameters() as $i => $param) {
	        $params[] = $param->name;
	        if ($param->isOptional() && !is_array($param->getDefaultValue())) {
	            $params[$i] .= ' = '. (string)$param->getDefaultValue();
	        }
	    }
	    echo sprintf("\t%s(%s)\n", $method->name, implode($params, ','));
	}
	die;
	${2}

# Docs
snippet doc_author
	@author Joseph Rouff <rouffj@gmail.com>
snippet doc_param
	@param ${1:type} ${2:$varName} ${3:param description}
snippet doc_return
	@return ${1:type} ${2:description}
snippet doc_inh
	/**
	 * {@inheritDoc}
	 */
